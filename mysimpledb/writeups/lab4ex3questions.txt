Questions
---------

Answer these questions.  With each question is a hint as to which part of the code walk you might consult to find the answer.

(Walk thru 1) How many instances of the TableStats class are created?
	None. Parser actually did not initialize any instance of TableStats.
	Instead, since all methods of TableStats are static, they are directly called using the class name.

(Walk thru 4) In class, we said a logical plan is a relational algebra tree.  That's not how it's represented in SimpleDB.  How is it represented? 
	The LogicalPlan class in this case consists of 3 seperate iterators.
	Each of these iterators contains one of three types of operations (scan, filter, join).

(Walk thru 5) The physicalPlan is a relational algebra tree.  Describe the basic shape of this tree in terms of which ops go where.
	In this tree, all of the scan nodes are (aka the base tables) are the leafs.
	Up one level from that are the filter nodes.
	And finally the Join nodes (which dominates run time) are at the top levels of the tree.

(Walk thru 5) Suppose a query applies multiple filters to a single table.  For example, the query described in the lab write up filters on both actor first and last name.  In such cases, how is the selectivity estimated?  
	It's going to be the product of the estimated selectivity of each filter.

(Walk thru 5) Explain the meaning of this if statement.  Why should the subplanMap have size 0 or 1 at this point?

    if (subplanMap.size() > 1) {
        throw new ParsingException("Query does not include join expressions joining all nodes!");
    }

	This is because it signals that there is more than one final joins and as such there is no final result.
	Another way to think of this is it signals there are more than 1 relational algebra tree in the plan.

(Walk thru 7) What does computeCostAndCardOfSubplan do when the joinSet contains only a single join, the joinToRemove?
	This is the base case where joinToRemove is the only join to perform.
	In this case, we simply calculate the cost of joining the 2 tables indicated in joinToRemove and return that value.
	
(Walk thru 9) Suppose we are considering a join between a table A and the result of a join between B and C.  Assume table A is the outer relation in the join.  What is the cost estimate?  Your expression should be in terms of the sizes (# page, # tuples) of the base relations A, B, C.
	The cost of joning A to the join of B and C is: ioCostPerPage*#pages(A)+#tuples(A)*joinCost(B,C)
	The cost of joining B and C is: ioCostPerPage*#pages(B)+#tuples(B)*ioCostPerPage*#pages(C)
	Thus, the total cost of joining the 2 tables are: ioCostPerPage*#pages(A)+#tuples(A)*ioCostPerPage*(#pages(B)+#tuples(B)*#pages(C))

(Walk thru 10) In lab 3, you write Join and Filter operators.  Both of these support the DbIterator interface.  When/where are these iterators called?
	In the class Query, the variable "op" represents the root of the relational algebra tree.
	The physical plan represents the relational algebra tree, with each node representing an Join/Filter operations.
	Each of these nodes produces output that is pipelined into its parent node.

Exercise 7
----------

Query 1:

select d.fname, d.lname
from Actor a, Casts c, Movie_Director m, Director d
where a.id=c.pid and c.mid=m.mid and m.did=d.id 
and a.fname='Ginger' and a.lname='Rogers';

Query 1 optimizer's plan:

 					π(d.fname,d.lname),card:1
                                                 |
                                                 ⨝(m.did=d.id),card:1
                              ___________________|____________________
                              |                                      |
                              ⨝(c.mid=m.mid),card:1                  |
                ______________|_______________                       |
                |                            |                       |
                ⨝(a.id=c.pid),card:1         |                       |
  ______________|______________              |                       |
  |                           |              |                       |
  σ(a.lname=Rogers),card:1    |              |                       |
  |                           |              |                       |
  σ(a.fname=Ginger),card:1    |              |                       |
  |                           |            scan(Movie_Director m)    |
scan(Actor a)               scan(Casts c)                          scan(Director d)


Query 1 plan explanation:

We look at the a:c join operations. Since a only has cardinality 1 after applying the filter and the cardinality of the result is approximated to be 1 as well, it is performed first. Similarly, we perform the c:m join next since the outer relation only has cardinality approximately 1 and finally the m:d join.

Query 2:

select a.fname, a.lname
from Actor a, Casts c, Movie_Director m, Director d, Genre g
where a.id=c.pid and c.mid=m.mid and m.did=d.id 
and g.mid = m.mid and g.genre='Drama' and d.fname = 'Lars' and d.lname = 'von Trier';


Query 2 optimizer's plan:

								π(a.fname,a.lname),card:12
                                                                               |
                                                                               ⨝(c.pid=a.id),card:12
                                                           ____________________|____________________
                                                           |                                       |
                                                           ⨝(m.mid=c.mid),card:12                  |
                                  _________________________|_________________________              |
                                  |                                                 |              |
                                  ⨝(m.did=d.id),card:1                              |              |
               ___________________|___________________                              |              |
               |                                     |                              |              |
               ⨝(g.mid=m.mid),card:1                 σ(d.lname=von Trier),card:1    |              |
  _____________|______________                       |                              |              |
  |                          |                       σ(d.fname=Lars),card:1         |              |
  σ(g.genre=Drama),card:1    |                       |                              |              |
  |                          |                     scan(Director d)                 |            scan(Actor a)
scan(Genre g)              scan(Movie_Director m)                                 scan(Casts c)




Query 2 plan explanation:

The filter of g.genre = 'Drama' return an estimated cardinality of 1 due to a quirk in the StringHistogram that will be explained below. The cost of the join operation is estimated as cost(t1 join t2) = scan(t1)+estimatedCard(t1)*scan(t2). With estimatedCard = 1 throughout most of the tree as shown above, this means that the cost of the joining the 4 tables g,m,d,c will be estimated to be around the sum of the cost of scanning each of the 4 tables. Depends on how the subsets are generated, there can be a number of different plan here but essentially the estimated cost of joining these 4 tables are the same. For the last join, the result of the previous join with estimated cardinality of 12 will be joined with the last table Actor, creating the tree above.

The reason StringHistogram estimated the card of the filter to be 1 is because it uses the IntHistogram to estimate its result. It means that a bucket can include a range of integers so while all string entries of "Drama" is mapped to a single integer, it is added to a general bucket and the histogram code assume all these entries are evenly distributed along the whole range. This leads to the Histogram estimating the cardinality to be 1. It should also be noted that while the StringHistogram is not very useful in this case but it could be very useful in a case where there are a large number of distinct strings.
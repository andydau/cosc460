package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    
    private JoinPredicate pred;
    private DbIterator child1;
    private DbIterator child2;
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.pred = p;
        this.child1 = child1;
        this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.pred;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     * alias or table name.
     */
    public String getJoinField1Name() {
        // some code goes here
    	TupleDesc desc = this.child1.getTupleDesc();
    	String name = desc.getFieldName(this.pred.getField1());
        return name;
    }

    /**
     * @return the field name of join field2. Should be quantified by
     * alias or table name.
     */
    public String getJoinField2Name() {
    	TupleDesc desc = this.child2.getTupleDesc();
    	String name = desc.getFieldName(this.pred.getField2());
        return name;
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     * implementation logic.
     */
    private TupleDesc td = null;
    public TupleDesc getTupleDesc() {
        // some code goes here
        if (this.td==null){
        	this.td = TupleDesc.merge(this.child1.getTupleDesc(), this.child2.getTupleDesc());
        }
        return this.td;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        this.child1.open();
        this.child2.open();
    }

    public void close() {
        super.close();
        this.child1.close();
        this.child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        this.child1.rewind();
        this.child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p/>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p/>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    private Tuple t1 = null;
    private Tuple t2 = null;
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        while ((this.child1.hasNext())||(this.child2.hasNext())){
        	if (t1==null){
        		t1 = this.child1.next();
        	}
        	while (this.child2.hasNext()){
        		t2 = this.child2.next();
        		if (this.pred.filter(t1, t2)){
        			Tuple temp = merge(t1,t2);
        			return temp;
        		}
        	}
        	if (this.child1.hasNext()){
        		t1 = this.child1.next();
        		this.child2.rewind();
        	}
        }
        return null;
    }
    
    private Tuple merge(Tuple t1, Tuple t2){
    	Tuple temp = new Tuple(getTupleDesc());
    	int len1 = t1.getTupleDesc().numFields();
    	for (int i = 0; i < len1;i++){
    		temp.setField(i, t1.getField(i));
    	}
    	int len2 = t2.getTupleDesc().numFields();
    	for (int i = 0; i < len2; i++){
    		temp.setField(i+len1,t2.getField(i));
    	}
    	return temp;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        DbIterator[] result = new DbIterator[2];
        result[0] = this.child1;
        result[1] = this.child2;
        return result;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        this.child1 = children[0];
        this.child2 = children[1];
    }

}

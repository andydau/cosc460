package simpledb;

import java.io.Serializable;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Iterator;

/**
 * Tuple maintains information about the contents of a tuple. Tuples have a
 * specified schema specified by a TupleDesc object and contain Field objects
 * with the data for each field.
 */
public class Tuple implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Create a new tuple with the specified schema (type).
     *
     * @param td the schema of this tuple. It must be a valid TupleDesc
     *           instance with at least one field.
     */
    private TupleDesc desc;
    private RecordId rid;
    public ArrayList<Field> fields = new ArrayList<Field>();
    public Tuple(TupleDesc td) {
    	this.desc = td;
    	Iterator<TupleDesc.TDItem> list = td.iterator();
        while (list.hasNext()){
        	TupleDesc.TDItem temp = list.next();
        	if (temp.fieldType.compareTo(Type.INT_TYPE)==0){
        		Field newField = new IntField(0);
        		this.fields.add(newField);
        	}
        	else {
        		Field newField = new StringField("",Type.STRING_TYPE.getLen());
        		this.fields.add(newField);
        	}
        }
    }

    /**
     * @return The TupleDesc representing the schema of this tuple.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return this.desc;
    }

    /**
     * @return The RecordId representing the location of this tuple on disk. May
     * be null.
     */
    public RecordId getRecordId() {
        // some code goes here
        return this.rid;
    }

    /**
     * Set the RecordId information for this tuple.
     *
     * @param rid the new RecordId for this tuple.
     */
    public void setRecordId(RecordId rid) {
        this.rid = rid;
    }

    /**
     * Change the value of the ith field of this tuple.
     *
     * @param i index of the field to change. It must be a valid index.
     * @param f new value for the field.
     */
    public void setField(int i, Field f) {
        // some code goes here
    	if (f.getType().equals(this.fields.get(i).getType())){
    		this.fields.set(i, f);
    	}
    	else{
    		throw new RuntimeException();
    	}
    }

    /**
     * @param i field index to return. Must be a valid index.
     * @return the value of the ith field, or null if it has not been set.
     */
    public Field getField(int i) {
        // some code goes here
        return this.fields.get(i);
    }

    /**
     * Returns the contents of this Tuple as a string. Note that to pass the
     * system tests, the format needs to be as follows:
     * <p/>
     * column1\tcolumn2\tcolumn3\t...\tcolumnN
     * <p/>
     * where \t is any whitespace, except newline
     */
    public String toString() {
        // some code goes here
        Iterator<Field> it = this.fields.iterator();
        String result = "<p/>";
        while (it.hasNext()){
        	result += it.next().toString()+"\t";
        }
        
    }

}

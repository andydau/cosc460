package simpledb;

import java.io.Serializable;
import java.util.*;

/**
 * TupleDesc describes the schema of a tuple.
 */
public class TupleDesc implements Serializable {

    /**
     * A help class to facilitate organizing the information of each field
     */
    public static class TDItem implements Serializable {

        private static final long serialVersionUID = 1L;

        /**
         * The type of the field
         */
        public final Type fieldType;

        /**
         * The name of the field
         */
        public final String fieldName;

        public TDItem(Type t, String n) {
            this.fieldName = n;
            this.fieldType = t;
        }

        public String toString() {
            return fieldName + "(" + fieldType + ")";
        }
    }

    private static final long serialVersionUID = 1L;

    /**
     * Create a new TupleDesc with typeAr.length fields with fields of the
     * specified types, with associated named fields.
     *
     * @param typeAr  array specifying the number of and types of fields in this
     *                TupleDesc. It must contain at least one entry.
     * @param fieldAr array specifying the names of the fields. Note that names may
     *                be null.
     */
    private ArrayList<TDItem> desc = new ArrayList<TDItem>();
    public TupleDesc(Type[] typeAr, String[] fieldAr) {
        // some code goes here
    	for (int i = 0;i <typeAr.length; i++){
    		TDItem temp = new TDItem(typeAr[i],fieldAr[i]);
    		desc.add(temp);
    	}
    }

    /**
     * Constructor. Create a new tuple desc with typeAr.length fields with
     * fields of the specified types, with anonymous (unnamed) fields.
     *
     * @param typeAr array specifying the number of and types of fields in this
     *               TupleDesc. It must contain at least one entry.
     */
    public TupleDesc(Type[] typeAr) {
    	for (int i = 0;i <typeAr.length; i++){
    		TDItem temp = new TDItem(typeAr[i],null);
    		desc.add(temp);
    	}
    }

    /**
     * @return the number of fields in this TupleDesc
     */
    public int numFields() {
        // some code goes here
        return desc.size();
    }

    /**
     * Gets the (possibly null) field name of the ith field of this TupleDesc.
     *
     * @param i index of the field name to return. It must be a valid index.
     * @return the name of the ith field
     * @throws NoSuchElementException if i is not a valid field reference.
     */
    public String getFieldName(int i) throws NoSuchElementException {
        // some code goes here
    	if (i<this.desc.size()){
    		return this.desc.get(i).fieldName;
    	}
    	else{
    		throw new NoSuchElementException();
    	}
    }

    /**
     * Gets the type of the ith field of this TupleDesc.
     *
     * @param i The index of the field to get the type of. It must be a valid
     *          index.
     * @return the type of the ith field
     * @throws NoSuchElementException if i is not a valid field reference.
     */
    public Type getFieldType(int i) throws NoSuchElementException {
        // some code goes here
    	if (i<this.desc.size()){
    		return this.desc.get(i).fieldType;
    	}
    	else{
    		throw new NoSuchElementException();
    	}
    }

    /**
     * Find the index of the field with a given name.
     *
     * @param name name of the field.
     * @return the index of the field that is first to have the given name.
     * @throws NoSuchElementException if no field with a matching name is found.
     */
    public int fieldNameToIndex(String name) throws NoSuchElementException {
        // some code goes here
    	int index = -1;
    	for (int i=0;i<desc.size();i++){
    		if (desc.get(i).fieldName.equals(name)){
    			index = i;
    		}
    	}
        if (index!=-1){
        	return index;
        }
        else{
        	throw new NoSuchElementException();
        }
    }

    /**
     * @return The size (in bytes) of tuples corresponding to this TupleDesc.
     * Note that tuples from a given TupleDesc are of a fixed size.
     */
    public int getSize() {
        // some code goes here
    	int result = 0;
        for (int i = 0; i < desc.size();i++){
        	result += desc.get(i).fieldType.getLen();
        }
        return result;
    }

    /**
     * Merge two TupleDescs into one, with td1.numFields + td2.numFields fields,
     * with the first td1.numFields coming from td1 and the remaining from td2.
     *
     * @param td1 The TupleDesc with the first fields of the new TupleDesc
     * @param td2 The TupleDesc with the last fields of the TupleDesc
     * @return the new TupleDesc
     */
    public static TupleDesc merge(TupleDesc td1, TupleDesc td2) {
        // some code goes here
        Type[] type = new Type[td2.numFields()+td1.numFields()];
        String[] field = new String[td2.numFields()+td1.numFields()];
        
        for (int i =0; i < td1.numFields();i++){
        	type[i] = td1.getFieldType(i);
        	field[i] = td1.getFieldName(i);
        };
        for (int i =0; i < td2.numFields();i++){
        	type[i+td1.numFields()] = td2.getFieldType(i);
        	field[i+td1.numFields()] = td2.getFieldName(i);
        };
        return new TupleDesc(type,field);
    }

    /**
     * Compares the specified object with this TupleDesc for equality. Two
     * TupleDescs are considered equal if they are the same size and if the n-th
     * type in this TupleDesc is equal to the n-th type in td.
     *
     * @param o the Object to be compared for equality with this TupleDesc.
     * @return true if the object is equal to this TupleDesc.
     */
    public boolean equals(Object o) {
        // some code goes here
    	if ((this.desc==null)||(o==null)){
    		return false;
    	};
    	TupleDesc comp = (TupleDesc) o;
        if (this.desc.size()!=comp.numFields()){
        	return false;
        }
        else{
        	for (int i = 0; i < comp.numFields();i++){
        		int compResult = this.desc.get(i).fieldType.compareTo(comp.getFieldType(i));
        		if (compResult!=0){
        			return false;
        		}
        	}
        }
        return true;
    }

    public int hashCode() {
        // If you want to use TupleDesc as keys for HashMap, implement this so
        // that equal objects have equals hashCode() results
        throw new UnsupportedOperationException("unimplemented");
    }

    /**
     * Returns a String describing this descriptor. It should be of the form
     * "fieldName[0](fieldType[0]), ..., fieldName[M](fieldType[M])"
     *
     * @return String describing this descriptor.
     */
    public String toString() {
        // some code goes here
    	String result = "";
    	for (int i = 0; i< this.numFields();i++){
    		result += this.desc.get(i).toString()+", ";
    	};
    	result = result[:result.length()-1];
        return result;
    }

    /**
     * @return An iterator which iterates over all the field TDItems
     * that are included in this TupleDesc
     */
    public Iterator<TDItem> iterator() {
        // some code goes here
        return this.desc.iterator();
    }

}
